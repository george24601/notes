In lambda-calculus everyting is a function: arguemnts accpeted by functions are themselves functions and thr esult returned is another
function

t = x  (variable)
lambda(x).t (abstraction)
 t t (application)

transofmration from concrete to abstract syntax -> lexer +  parser

s t u same as (s t) u <=> application associates to the left
bodies of abstactions are taken to extend as far to the right

occurence of variable x is bound when it occurs in t of lambda(x).t, we can say lambda(x) is binder whose scope is t.
free if ocurence of x is not bound by an enclosing abstraction on x

term with no free variables: closed. combinators

Each step is rewriting whose left-hand is abstraction, by substituting the right-hand component for the bound variable in the abstraction's
body,i.e.,
(lambda(x).x(lamba(x).x))(u r) -> ?

redex: reducialbe expression. rewriting redex is beta-reduction

full beta-reduction: any redex may be reduced at any time.
normal order: leftmost, outermost redex first,i.e., each term eavls in one step to at msot one term t'
call by name: no reductions inside abstraction.
call by value: outermost redexs are reduced and where a reduced only when its right-hand side has already been reduced to a value, easiest
to enrich with features s.a. excpetions and references

------

multiple-argument into higher-order function: currying
f=lambda(x).lambda(y).s (s is a term with free varaibles x and y)

tru = lambda(t).labmda(f).t
fls = lambda(t).lambda(f).f

So the if conditional is essentially the combinator, in the form of test b v w, where b is the boolean defined above
test = lambda(l).lambda(m).lambda(n). l m n

excercise: reduce steps with test and booleans

and = lambda(b).lambda(c). b c fls
or = lambda(b).lambda(c). b tru c
not = lambda(b) b fls tru

-----
pair = lambda(f).lambda(s).lambda(b). b f s
fst = lambba(p). p tru;
snd = lambda(p). p fls

fst(pair v w) ->* v

----
church numeral. notice that c(0) and false are essentially the same
c(0) = lambda(s).lambda(z).z;
c(1) = lambda(s).lambda(z).s z
c(2) = lambda(s).lambda(z). s (s z)

scc = lambda(n).lambda(s).lambda(z). s (n s z)

alternatively?
l(n).l(s).l(z). s (n (c(1) s z))

plus = l(m).l(n).l(s).l(z). m s (n s z)

So (plus n) gives funciton that n to whatever argument it is given

times = l(m).l(n). m (plus n) c(0)
power= l(m).l(n). m (times n) c(1)

-----
To test if a church numerical is 0

apply numeral to pair of terms zz and ss s.t. appplying ss to zz one or more times gives fls, while not applying it at all yields true
i.e., zz should be true

iszero = l(m). m (l(x). fls) tru;

zz = pair c(0) c(0)
ss = l(p). pair (snd p) (plus c(1) (snd p))
prd = l(m). fst (m ss zz)

sub = l(m).l(n).l(s).l(z) n prd (m s z)

5.2.6
Q: how many eval steps to calc prd C(n)

equal = l(m).l(n).iszero (sub m n)

---------
realbool = l(b). b true false
churchbool = l(b). if b then tru else fls

realq =l(m).l(n). (equal m n) true false
realnat = l(m) m (l(x). succ x) 0

Note we can not apply m to succ directly!

similarly scc C(1) does not eval to C(2) directly under call-by-value rule, need that parameter pass in to kick it off! Converting it to the
realnat will supply the extra arguments

------
omega = (l(x).x x) (l(x). x x), itself is not in normal form, but reducing it further gives the same thing! we call it it diverge

fixed-point combinator

fix - l(f). (l(x). f (l(y). x x y)) (l(x). f (l(y). x x y))

approach: g = l(f). (body containing f), and then h = fix g

g = l(fct). l(n). if realeq n c(0) then c1 else (times n (fct (prd n)))
fatorial = fix g

note that fct n ->* g fct n. fct supplies itself and n as arugments to g when appliced to an argument

5.2.8

with Church booleans
g = l(fct). l(n). test (n c(0)) c1 (times n (fct (prd n)))

g = l(cn).l(n) if cn = 0 then c(0) else scc (cn (n-1))
churchnat = fix g

5.2.11
-----------

Let V be a countable set of variable names, set of terms is the smallest set T s.t.
x in T for every x in V
if t in T and x in V, then l(x).t in T
if t(1) in T and t(2) in T, then t1 t2 in T

set of free variable of a term t
FV(x) = {x}
FV(l(x).t1) = FV(t1) - {x}
FV(t1 t2) = FV(t1) U FV(t2)

5.3.3
|FV(t)| <= size(t)

----
capture-avoiding substitution + renaming convention to form substitution definition

Operational sematics

t = x
l(x).t
t t

v = l(x).t

3 eval rules: E-App1, E-App2, E-AppAbs

By inference E-App1 applies to t(1) that are NOT values(why?), and E-app2 can not fire until LHS is a value, thus,an order of evaluation is determined.

5.3.6. 
the example is call-by-val, try full beta-reduction, normal-order, and lazy eval eval rules
full beta-reduction: any redex can be reduce at any time
normal order: left most, outer most first
lazy eval: normal order + no reduciton inside abstraction
