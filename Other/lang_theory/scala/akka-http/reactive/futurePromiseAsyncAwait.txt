1.
import scala.concurrent.ExecutionContext.Impicits.global

val socket = Socket()
val packet : Future[Array[Byte]] = socket.readFromMemory()

val confirmation : Future [Array[Byte]] = packet.flatMap ( p => socket.sendToEurope(p))

def sendToEurope(packet: Array[Byte]) : Future [Array[Byte]] = Http(URL, Request(packet))
.filter(response => response.isOK) //will throw exception if it doesnt satisfy. Future will capture this in a try
.map(response => response.toByteArray) 

2. now send the thing twice

val europeConfirm = sendTo
val usaConfirm = sendTo

europeConfirm.zip(useConfirm) //when zipping 2 futures, and one of them fails, the zip will fail!!

//so introduce recover and recoverWith

sendTo(europe, packet) recoverWith {
	case europeError => sendTo(usa, packet) recover {
			case usaError => usaerror.getMessage.toByteArray
}
}

3.
if that future fails to, take the error of THIS future

def fallbackTo(that: => Future[T]): Future[T] = {
 this recoverWith {
  case _ => that recoverWith { case _ => this}
}

}

4. awaitable.ready/result: useful for testing. do NOT use it in production!

import scala.language. postfixOps

val c = Await.result(confirmation, 2 seconds)


5.
def retry (noTimes: Int) (block: => Future[T]): Future[T] = {
	if (noTimes == 0)
		Future.failed(new Exception("sorry"))
	else
		block fallbackTo {
			retry(noTimes - 1) (block}
		}
}

def retry (noTimes: Int) (block: => Future[T]): Future[T] = {
val ns = (1 to noTimes).toList
val attempts = ns.map(_ => () => block) //need this thunk for lazy eval!
val failed = Future.failed(new Exception("boom"))
val result = attempts.foldLeft(failed) 
 ((a, block) => a recoverWith { block()}

result
}


val result = attempts.foldRight(() => failed)
 ((block, a) => () => {block() fallbackTo {a()})
result()

6. implicit future with async await

import scala.async.Async._

def retry (noTimes: Int) (block: => Future[T]): Future[T] = {
async {
var i = 0

var result : Try[T] = Failure(new Exception())
while (result.isFaiulre && i < noTimes) {
	result = await (Try{block)}
	i += 1
}

}

result.get
}

7. use async-await to implement future.filter

def filter(p : T => Boolean) : Future[T] = async {
 val x = await {this}
if(!p(x)) {
	throw new NoSuchElementException()
}else 
x
}

def filter(pred: T => Boolean) : Future[T] = {

val p = Promise[T] ()

this onComplete {
case Failure(e) =>
	p.failure(e)
case Success(x) =>
	if(!pred(x)) p.failure(new NoSuchElementException)
	else p.success(x)
}

p.future
}

8.future.flatmap

def flatMap[S] (f: T => Future[S]) : Future[S] = async {
val x: T = await {this}
await {f(x)}
}

implement zip with async-await vs promise


9. race condition fill a promise
def race (left: Future[T], right: Future[T]) : Future[T] = {
Promise[T] p = Promise[T]()

left.onComplete {p.tryComplete(_)}
right.onComplete {p.tryComplete(_)}

p.Future
}

10. implement sequence: Future vs async-await vs promise

def sequence(fts: List[Future[T]]) : Future[List[T]} = {
fts match {
	case Nil => Future(Nil)
	case (ft:: fts) => ft.flatMap (t => sequence (fts).flatMap (ts => Future(t::ts))

}
}
