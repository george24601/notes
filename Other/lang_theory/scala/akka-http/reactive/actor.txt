every actor knows its own address
creating an actor returns its address
addresses can be sent within messages

messages are received sequentially
behavior chagne is effective before proccesing the next message
processing one message is the atomic unit of execution(!!!)
=> actor is effectively single-threaded with blocing replaced by enqueueing a message

JVM flags to do akka logging
-Dakka.loglevel=DEBUG -Dakka.actor.debug.receive=on

good thing for messages: all messages can be persisted
can include unique correlation IDs => enables exactly once
delivery can be retried until successufl

make transfer relaible:
log activities of wiretransfer to persistent storage
each transfer has a unique ID
add ID to withdraw and deposit
store IDs of completed actions within bankaccount

In akka, if an actor sends multiple messgae to the same destination, they will not arrive out of order

-------
Akka scheduler: high vol, short durations, and frequent cancellation

reactive application is non-blocking and event-driven top to bottom
actors are run by a (shared) dispatcher, which can also run futures
prefer imutable data structures
prefer context.become for differnet stats, with data local to the behavior
do not refer to actor state from code running synchronously

---------

Thrown failure reified as messages

Individual failure is handled by the team leader

Failed actor is terminated or restarted
decision must be taken by one other Actor
supervised Actors form a tree structure
the supervisor needs to create its subordinate

If decision applied to all children: AllForOneStrategy

recovery by restart requires stable ids to refer to the service
in Akka, the ActorRef stays valid after a restart, although the actor behind ref may not

Actor-local state cannot be kept across restarts, only external state can span restarts
child actors not stoppped during restart will be restarted recursively

-------------

havng an ActorRef implies liveness at some earlier point
restarts are not externally visible
after stop there will be no more responses

But what about no reply case? which part is wrong
Actor registers interest: receives Terminated(target) message when argent stops, will not receive any direct messagess from target thereafter

restarts are recursive, more frqeunt near the leaves
avoid restaring actors with important state
keep important data near the root, delegate risk to the leaves

-------
shall not lose important state due to failure
must persist state as needed
must recover state at restart

solution:
in-place updates
persiste change in append only fashion

performing the effect and persisting that it was done cannot be atomic

peform it before persisting for at least once sematnics
perform it after persisting for at most once sematics
-------

actor communication is asynch, one-way and not guaranteed
actors are location transparent, hidden behind ActorRef

to turn on cluster
-Dakka.actor.provider=akka.cluster.ClusterActorRefProvider
-Dakka.remoate.netty.tcp.port=0
-Dakka.cluster.auto-down=on
