It is better to create a parent supervisor for a specific category of actors and then possibly another parent supervisor for a given coarse-grained process, task, or domain model entity.

 reloading and retry strategies must be used if you must ensure that a given message is delivered. Much of this will be handled by Akka Persistence,

actor should be able to perform all prestart initalization by overriding preStart(), and all postStop clean up by overriding postStop()

All for one strategy: it is used when sibling actors logically belong together and are implicitly coupled and when there is a “showstopper” kind of problem where it makes sense to stop the entire hierarchy of actors.

Different ports for remote actor? It would be if both systems ran on the same physical/logical server. 

you don’t want to create many, many actors under /remote.

best kind of actor to remotely create is a kind of work supervisor to create any number of child actors local to itself.

with Akka clustering, it’s possible to set up machines to join and leave the cluster at runtime.

Every node must share the same ActorSystem name. Every node member must use a different port number within its host server hardware

The cluster automatically detects newly joining nodes and failed nodes by Gossip protocol

A single node acts as the leader of the cluster

when a JVM node leaves the cluster, it may not rejoin the cluster using the same ActorSystem: have to shutdown and start a new one

a seed node is not necessarily made the leader. Further, newly joining nodes don’t have to use the seed nodes to join the cluster. 

When initially starting the cluster, the first node in the seed-nodes list must be started before all others. 

ure that heartbeat messages are given priority, they should be configured with their own dispatcher so that they always have threads

Join a cluster: 1.through config with defined seed nodes 2. programmitically 3. manual via JMX

 Subscribing to the MemberUp event and watching for joining nodes with specific roles affords you the opportunity to “dial in” for specific
work responsibilities. 

Routers exist in two forms in Akka: as groups and as pools. In the case of a group, the router is talking to a set of preexisting actors
already, running on different nodes in the cluster. For a pool, the router owns the life cycle of the actors and can create new actors on
different nodes.
