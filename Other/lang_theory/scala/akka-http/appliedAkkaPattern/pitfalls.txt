-------
Work with future

trait AvailabilityCalendarRepository {
  def find(resourceId: Resource): Future[AvailabilityCalendar]
}

sender inside future.foreach problem => instead of holding it in a val, Pipe the result of that future to another actor 

class AvailabilityCalendarWrapper(calendarRepository: AvailabilitiyCalendarRepository) extends Actor {
  import AvailabilityCalendarWrapper._

  override def receive: Receive = {
    case Find(resourceId) => calendarRepository.find(resourceId).pipeTo(sender())
  }

override def receive: Receive = {
    case Find(resourceId) => calendarRepository.find(resourceId).pipeTo(self)(sender())
    case AvailabilityCalendar(...) =>
      // Perform various modifications on the calendar
             sender() ! ModifiedCalendar(...)
               }
}


 This time though, we pipe back to self and include the sender as a secondary argument in the pipeTo. This allows us to maintain the link to the original sender. 

Note that not all map is bad, but it should remain purely for converting hte message to the approritae wrapper

------
Ask Pattern - Tell, not Ask!

val resultFuture = (availabilityCalendar ? AvailabilityCalendarWrapper.find(resourceId)).mapTo[AvailabilityCalendar]

Mutli-stage actors: each one uses timeout

Option 1:  use the “forward” method. By forwarding the message rather than using the Tell operator, we could ensure that the final stage in the pipeline has a reference to the original sender

Option 2:o eliminating the Ask would be to pass a “replyTo” actor along as part of the messages. We could include a reference to the actor that is expecting the response.

Option 3: pass a promise as part of the message. Here we would send the promise through the pipeline so that the final stage of the pipe could simply complete the promise. The top level of the chain would then have access to the future that promise is completing and we could resolve the future and deal with it appropriately (using pipeTo).

Ask is designed to be used in situations where either we need to talk to an actor from outside the system, or we need to use a request/response style approach and a timeout is desirable. If we find we need to introduce a timeout into a situation that doesn’t warrant one, then we are probably using the wrong approach.

---------




