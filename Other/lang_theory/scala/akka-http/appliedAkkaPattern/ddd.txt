Entities: uniquely identifiable by a key or composite key, but itself mutable => directly maps to the actor

value object: no identifiable outside the attributes, IMMUTABLE => directly maps to message. Can be the state of actor 

Aggregate: aggregates other objects in the system, NO reference to anything inside aggreagte: you have to go through Aggregate, generally the
top level pieces => think about deletion: if i delete this entity, will other entities be deleted => mapped to top level actors that takes
care of its children

-------
Repositories: abstraction lay over storage/infrastructure, e.g., read-modify-write review Often a trait in Scala- but this violates "Tell,
No Ask" !.Instead,  tell the repo to give a
mesage to that Aggregate, i.e., repo is like a "manager", which locates and fowards the messaage, a parent of a certain set of Actors, 

object PersonRepository {
  case class Send(userId: UUID, message: Any)
}

Note that since we communicate via message instead of methods, we don't use trait there. Client just needs to know the message protocol

Factory: abstract new object creation, Repository to abstract existing object recreation => often combined
-------

Services: interacts with multiple agregates => last resort.e.g., temp worker to handle a single request, once the request has been procces,
the service should be terminated

Bounded Context: top level actor for each BC, or services disconnected from each other, i.e., each MS represents a single BC
