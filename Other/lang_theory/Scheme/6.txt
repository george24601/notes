in ml, to have a list of "ints or strings", so use a datatype

datatype int_or_string =  I of int | S of string

fun funny xs =
	case xs of
	[] => 0
| (I i) :: xs' => ...
} (S s) :: xs' =>...

(define (funny-sum xs)
	(cond [(nll? xs) 0]
		[(number? (car xs)) (...)])

///will write such functions with type exp-> exp instead of exp -> int
datatye exp = Const of int
| Negate of exp
|Add of exp

fun eval_exp_new e =
let 
fun get_int e =
case e of
Const i => i
| _ => raise (Error
-----------


(define  (Const i) (list 'Const i))
(define  (Negate e) (list 'Negate e))
(define (Add e1 e2) (list 'Add e d2))
(define (Multiply e1 e1) (list 'Multiply e1 e2 ))
(define (Const? x) (eq? (car x) 'Const))
(define (Multiply? x) (eq? (car x) 'Multiply))
.....
(define (add-e1 e) (car (cdr e)))
(define (add-e2 e) (car (cdr (cdr e))))

'foo: Racket symbol, can compare symbol with eq?

(define (eval-exp e)
(cond [(Const? e) e]
	[(Negate? e) e] (Const (- (cosnt-int (eval -exp e)))))
	.....

In dynamic typing there is no definition of "expression"
---------------
Racket's struct

(struct foo (bar baz quux) #: transparent)

bar- first field
baz -second field
quux - third field
foo? is value a foo?
foo-bar a function that returns bar field => raises error if it is not foo type

#:transparent makes fields and accessor functions visible even outside the moudle that defines struct => REPL can print contents instead of abstract values

#:mutable makes all fields mutable but giving mutator set-foo-bar!, set-foo-baz!

(foo? e) (foo-bar e) (foo-baz e) (foo-quux) are given automatically

struct cannot be defined in terms of function or macros. It creates a new type of data.

this is call dynamic typing,i.e., the type info doesnt exist in the type system

why struct approach is better?
---------

-----------
racket and ML from each other's perspective: transform from one to another!
ML can be viewed as a subset of Racket, but rejects many more programes as illegal
Racket is just ML where every exp is part of one big datatype=> pattern match and check type as body of function

------------
static checking: reject a program after it parses but before it runs

trade-off: static checker has to reject some programs that would not actually do anyting wrong

sound: no false negative
complete: no false posivite

ususal for a PL type system to be sound but not complete.any static checker cannot do all of: always terminate, be sound, be complete => so we have to give up completeness, due to undecidability

---
weak typing: there exist program that , must pass static checking but then when run can "set th ecomputer on fire"
benefits: ease of lang implemnation:perforamcne, lower level
e.g. array bounds

staticv vs.dynamic chekci != "what is the run-tiem semantics of the primitive"
but related beucase it involves trade-offs between cathcin bugs sooner vs. maybe more convenienet
--------
eval: a run-tiem ceate some data, then tream the data as a prognd and run it
but do need ot "shop a lnague implementaion " in any program containing eval

quo and eavl areinverses

