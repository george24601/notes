;comment

;first line
#lang racket 

(provide (all-defined-out))

(define s "hello")
(define y ( + x 2))

(define cube1
	(lambda (x)
		(* x(* x x))))

(define cube2
	(lambda (x)
		(* x x x)))


(define (cube3 x)
	(* x x x))

(define (pow1 x y)
	(if (= y 0) 1 (* x (pow1 x (- y 1)))))

empty list null

cons: cons constructor

car: head

cdr: tail

null?: empty?

(define (sum xs)
	(if (null? xs) 0 (_ (car xs) (sum (cdr xs)))))

(define (my-append xs us))
	(if ( null? xs)
		ys
		(cons (car xs) (my-append(cdr xs) ys))))


(define (my-map f xs)
	(if (null? xs)
		null
	(cons (f (car xs)))


syntax: a term is either: an atom, speical form, or a sequence of terms in parens
if t1 a sepcial form, sematics of sequence is special

#t, #f ;true and false

parens matter! it means calls!
it is not optional (e) means call e with zero argiments so ((e))) means call e with zero arugments and call the result with zero argiments-> run time errors

e.g. if (= n 0) (1) (1) is wrong because of the first (1)
espeically without static type checking. Those errors are detected as RUN TIME, e.g., stepping out of recursion 

Dynamic type checking
e.g. a list that can contain number s or othe rlists. In ML, have to do type binding first

(defint xs (list 4 5 6))
(define ys (list (list 4 )list 5 0)) 6 7 (list 8))

(define (sum1 xs)
	(if (null? xs) 0
	(if (number? (car xs))
		(+ (car xs) (sum1 (cdr xs)))
		(+ (sum1 (car xs)) (sum1 (cdr xs))))


if (list? (car xs))

(cond [e1a e1b]
	[e2a e2b])

(define (max-of-list xs)
	(cod [(null? xs) (error "max-of-list give"]
		[(null? (cdr s)) (car xs)]
		[#t (let  ([tlans (max-of-lisxt (cdr xs))])
		(if (? tlans (car xs))
tlans
(car xs))])

(let ([name e1b]) real exp)

4 ways to define local variables
let, let*, let rec, define

the expression are all evalute in the enviroment from BEFORE the let-expression (NOT smae as ML)

(define (silly-dobul x)
(let ([x (+ x 3)]
	[y (+ x 2)
(+ x y -5)) => end result is just a double

i.e. it allows let ([y x] [x y])

let*: evalute in the enviroment produce drom theprevious bidings-> THIS IS ML's LEt

letrec: evalute in the enviroemnt that includes all the bindings -> needed for mutaual recursion

(define (silly-triple x)
	(letrec ([y (+ x 2)]
	[f (lambda (z) (+z y w x))]
[w (+ x 7)]
(f -9)))
NOTE: letrec exps are still evaled in order!
silly double will be (+ x y -8)!

do not use later digings except inside functions

----------
top level biding can call later bidning as long as the caller appears after the later binding definition

(set! x e) mutation!

-----------

cons: just make a pair
list: just a list of cons that ends with null

list? pair?: build-in primitives

mcons
(set-mcdr!@ mpr 47) 47
(set-mcar! (mcdr mpr) 14)
-------

evaluation: funciton is eager: all args evaled 
if, not evaled until the branch is hit

therefore

(define (my-if-bad e1 e2 e3)
(if e1 e2 e3) 
)

how to change it

(define (my-if-strange-but-works e1 e2 e3)
(if e1 (e2) (e3)))-> passing in not value, but the function which takes no argument that returns the value

function dont eval the body until you call them=> we eval arg, just the function!
Thunk: use this to delay the expression: zero argument function as a way to delay the evaluation

(lambda() e) => to call (e)

but if you use thunk more than once => every time it runs it reevals!

improvement: A thunk (let ([x (slow fuc call)]) (lamdbda() x)) => but 0 case beccomes slow as well!

futhuer improvment: lazy evaluation: Thunk and mutalbe pairs are enough

(define (my-delay th)
(mcons #f th))

(define (my-force p)
(if (mcar p)
	(mcdr p)
(begin (set_mar! p #t) ;mark as evaled
	(set-mcder! p ((mcdr p))) ;replace thunk with value
	(mcdr p)))) ;return the value; the thunk is already gone!

(my-mult x (let([p (my-delay (lamdda() (slow-add 3 4))))])
		(lambda() (my-force p)))

----------

Stream producer knows how create any number of values
stream consumder decides how many values to ask for
A stream is an infiinte sequence of  laues so cant maek a stream by making all the vluea
key idea : use a thunk to delay creating most o f the sequence

represent streams using pairs and thunks
a stream is a thrunk when call returns pair
'(next-anwer . next-thunk)

(car  (powers-of-tow)); first value
(car ((cdr (powers-of-tow))); next value

(define (number-until stream tester)
(letrect ([ f (lamdbda (stream ans)
(let ([pr (stream)[)
	(if (testeer (car pr))
anw
(f (cdr pr) (+anw 1)))]) ; how to use streams

(define ones (lambda () (cons 1 one))

(define (f x) (cons x (lambda () (f  (+ x 1))))

(define natx (lambda() (f 1)))

(define nats
	(letrec ([f (lambda(x) (cons x (lambda () (f (+ x 1))])
(lambda (f 1)))

(define powers-of-tow
(letrec([f (lambda(x) 
	(cons x (lambda() 
		(f (* x 2)))
)])

(define (stream-maker fn arg)...)

(deien mat (stream-m,aekr + 1))
(define powers-of-tow )stream-maker * 2))


(define one-bad (lambda () (cons 1 (ones-bad))); infinite loop! because we keep evaling! as a compariosn, the correct verison returns lambda not eval=> done

(f stream 1)

-----
Memoization


(define fib
	(letrec ([memo null]
	[f (lambda (x)
		(let  ([ans (assoc x memo)])
		(if ans
			(cdr ans)
			(let ([new-ans (if (or (= x 1) (= x 2))
				1
				(+ (f (-x 1)) (f (-x 2))))])
(begin 
(set! memo (cons (cons x new-ans) memo))
new-anws)))))])

f))

Note that where memo is defined, if it is defined inside call to f then it is
always using an empty table

assoc: takes a value and a list of pairs and returns the first pair in the list where the car of the pair equal to the value. It returns #f if no pair has such a car. 

