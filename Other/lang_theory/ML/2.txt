val x = { bar=(!-2, true andalso true), foo=3+4, baz=(false,9)}
#bar x(type checking is enforced)
tuple is just a syntatic sugar for records


datatype mytype = TowInts of int * int 
		| Str of string 
		| Pizza
(*add a new type mytype ot the envormnet
adds CONSTRUCTORS to the environment too!*)

val a = Str "hi"
val b = Str (Ctor type !!!)


fun f (X: mytype) =
	case x of 
		Pizza => 3
		| Str s => 8
		| TowInts(i1, i2)=> i1+i2


but patterns are not expressions=> we see if the result of e0 matches it!

why pattern matching is useful
1. you cannot forget a case
2. cant duplicate a case
3. not forge to test the variant correctly and get an exception
4. pattern-matching can be generalized

enum
datatype suit = club | Diamond |Heart | Spade of int
datatype id = StudentNum of int
	| Name of string 
		* (string option)
		* string

BUT that make one-of types inconveience lead to common BAD STYLE where each of types are used wher eone-of types are the right tool

e.g. student_num: int (!!!-1 use id, or other wise...)

datatype exp = Constatnt of int |
	Negate of exp
	|Add of exp * exp
	|Multply of exp * exp

Add (Constatn (10 + 9), Negage(Constant 4))

fun eval e =
	case e of 
		Constatn i => i
		| Negate e2 => ~(eval e2)
		|Add (e1, e2) => (eval e1)
		|Multiply (e1, e2) => (eval e1)

for no data constructors, pattern ci match value ci

var test_exp = Add (Constant 19, negate(constant 4))

fun max_constant e =7
	case e of 
		consatnt i => 1
		| Negate e2 => max_consant e
		| Add (e1, e2) => 
			let val m1 = max_constant e1
			val m2 = (* avoid unnecessary recursion calls!)
		| <ultiply (e1, e2) => max_of_tw(e1, e2)
end

Int.max(m1, m2) end => Int.max(max_costant e1, max_constant e2)
-----------

type snonym

type aname = t
just creates another name for a type
te type and the name are interchangable

type card = suit * rank
type name_record = { sudet : int option,
			first : string,
			middle: string option,
			last :string}

val c1 :card = (diamond, Ace) (* card -> bool is SAME as (diamod, ace) -> bool)s

fun is_Queen_of_Spades2 c =
------------------

datatype my_int_list = Empth 
|cons of int * my_nt_lists

val x = Cons (4, Cons(23, Cons(2008, Empty)))
(notice the LACK of types!!!)
fun append_my_list(xs, ys) =
	case xs of
		Empt =>
	|Cons (x xs') => cons(x, append_my_list(xs', ys))

NONE and SOME are constructors, not just functions!
[] and :: are ctor to for lists

therefore...
case xs of
[] => 0
| x:: xs' => x + sum_list xs'

fun append (xs, ys)
case xs of
[] => 0
| x:: xs' => x:: append(xs', ys)

fun inc_or_zero intoption =
case intoption of
NONE => 0
|Some i => i+ 1
-----------------
every val-binding and function-bidng uses pathtern-kathcing
ever function takes exactly one arg

the pattern (f1 =x1,..., fn=xn} matchs the !record! value {f1=v1,...fn=vn}s

fun sum_triple  triple =
	case triple of 
		(x, y, z) => x+ y + z

fun full_name r =
	case r  of
		{first =x, middle=y, last=z} =>
			x ^ " " ^ 

val p = e
great for getting all pieces out of an each-of type

let val (x, y, z) = triple
in
	x + y + z
end

fun full_name r =
	let val {frist =x, middle=y, last=z} = r
in

end

fun f p = e

fun sum_triple (x, y , z) =
	x + y + z

fun full_name {first=x, middle=y, last=z} =
x^ " " ^ y

just functions taking one tuple argment, implemented with a tuple pattern matching
fun rotate_left (x, y, z) = (y, z, x)

dont use the # character
do not need to write down type!

so partial_sum (2, "hi", 5) would work too! but type checker would return 'a instead

but in type checker, 'a must be replaced by a SAME type

int list * string list -> int list is wrong!

A type t1 is mroe generatl tha then type t2 if you can take t1 replace its type vas consistently, and get t2

type foo = int * int
{ quux: 'b, bar: int * a', baz : 'b}
is more general than
{quux : string, bar : foo, baz : string}

''a list * ''a -> ool

there are equality types that arise form using the = operator
----------------------------

fun zip3 list_triple =
	case list_triple of
		([], [] []) =>[]
|(hd1:: tl1, hd2:: tl2, hd3:: tl3) => (hd1, hd2, hd3) :: zip3(tl1, tl2, tl3)
|_ => raise ListLengthmismatch

fun unzip3 lst =
case lst = 
[] => ([], [], [])
|(a,b,c) :: tl => let val(l1, l2, l3) = unzip3 tl
				in (a:: l1, b::l2, c::l3)
end
fun nondecreaing xs=
case xs of
[] => true
| x:: [] => true
| head :: (neck :: rest) => head <= neck andalso nondecreaching (neck::rest)

datatype sgn = P | N | Z

fun multsign (x1, x2) =
		let fun sign x =
in case (sign x1, sign x2) of
(Z, _) => Z
|(_, Z) => Z
|_ => N

avoid nested case expressions if nested paterns aresimpler and avoid unnecesary barcnhs of let-expression
common idion: matching against a tple of datatyps to comare them
use wildard instead of variables when you donot need the data

eg.
a::b::c::d matchs all lists with >=3 elements
a:: b::c::[] matchs all lists with 3 elements!

((a,b), (c,d)) :: e matchs all non-empty list of pairs of pairs!!
----------------------------
exception Myu

exceptin Myther of int * int
raise Myther (1, 3)

e1 handle ex => e2

val x = maxlist () handle asdkfjas =42
handle canhave multiple bracnhs with patterns for type exn
-----------------

methodology: create a helpter funct that takes an accumulator
old base case becomes initial accumulator
new base case becomes final accumulator

fun fact n =
	let fun aux(n, acc) =
		if n = 0
		then acc
		else aux(n-1, acc *n)

fum sum xs =
	let fun aux(xs, acc) =
		case xs  of
		[] => acc
		| x:: xs' => aux(xs', x+ acc)
	in
		aux(xs, 0)
	end


fun rev xs =
	let fun aux(xs, acc) =
		case xs of 
			[] => acc
		| x :: xs' => aux(xs', x:: acc)
	in aux(xs, []) end

limitation:
e.g. process tress
avoid premature optimization

the "nothing left for the call to do" tuition would mean its a good candidatie for tail recursion